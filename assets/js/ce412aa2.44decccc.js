"use strict";(self.webpackChunkmy_docu_website=self.webpackChunkmy_docu_website||[]).push([[7808],{6769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=t(4848),s=t(8453);const i={},a="Engineering guide to understand Airflow",o={id:"machine-learning/MLOps/Airflow",title:"Engineering guide to understand Airflow",description:"Apache Airflow is a framework to orchestrate different types of tasks and distribute them between workers.",source:"@site/docs/machine-learning/MLOps/202201192140-Airflow.md",sourceDirName:"machine-learning/MLOps",slug:"/machine-learning/MLOps/Airflow",permalink:"/docs/machine-learning/MLOps/Airflow",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/machine-learning/MLOps/202201192140-Airflow.md",tags:[],version:"current",sidebarPosition:202201192140,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MLOps",permalink:"/docs/machine-learning/MLOps/MLOps"},next:{title:"Datasets",permalink:"/docs/machine-learning/datasets/"}},c={},l=[{value:"Concurrency configurations",id:"concurrency-configurations",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"engineering-guide-to-understand-airflow",children:"Engineering guide to understand Airflow"})}),"\n",(0,r.jsx)(n.p,{children:"Apache Airflow is a framework to orchestrate different types of tasks and distribute them between workers."}),"\n",(0,r.jsx)(n.h1,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(n.p,{children:"Airflow is designed to be used by very large organizations where there are many data pipelines, so it divides its workings in different processes, the main divisions are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"WebServer - Responsible for the visualization and ui;"}),"\n",(0,r.jsx)(n.li,{children:"Scheduler - Responsible for the scheduling and task distribution;"}),"\n",(0,r.jsx)(n.li,{children:"Metadata Database - Responsible for keeping all the information and states of tasks;"}),"\n",(0,r.jsx)(n.li,{children:"Broker - When using celery executor Redis can be used as a communication form between nodes;"}),"\n",(0,r.jsx)(n.li,{children:"Executors - Used to process the tasks."}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Each of this services is run one apart from other."}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"dags-and-tasks",children:"Dags and Tasks"}),"\n",(0,r.jsx)(n.p,{children:"Airflow uses Directed Acyclic Graph or DAG to define a collection of tasks that you want to run. Each task is written in python like:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"    t1 = BashOperator(\n        task_id='print_date',\n        bash_command='date',\n    )\n\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Tasks are defined through operators. There are tree types of operators:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Action operators - PythonOperator, BashOperator - They execute actions;"}),"\n",(0,r.jsx)(n.li,{children:"Transfer operators - Operators that trasfer data from one source to another;"}),"\n",(0,r.jsx)(n.li,{children:"Sensors operators - Operators that wait for a condition to be met."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To group them and create the DAG we use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"    with DAG(\n        'tutorial',\n        default_args=default_args,\n        description='A simple tutorial DAG',\n        schedule_interval=timedelta(days=1),\n        start_date=datetime(2021, 1, 1),\n        catchup=False,\n        tags=['example'],\n    ) as dag:\n        // put your tasks here\n        with TaskGroup('test_subgroup') as test_subgroup:\n            // put your subgroup tasks here\n"})}),"\n",(0,r.jsx)(n.p,{children:"Inside the DAG, after we coded all the tasks we need to give them order to do that you can use:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"    t1 >> [t2, t3] >> t4\n"})}),"\n",(0,r.jsx)(n.p,{children:"meaning that the first task is executed then t2 and t3 are executed at the same level next t4 is executed."}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Code examples extracted from ",(0,r.jsx)(n.a,{href:"https://airflow.apache.org/docs/apache-airflow/stable/tutorial.html",children:"Airflow Tutorial"})]}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"executors",children:"Executors"}),"\n",(0,r.jsx)(n.p,{children:"In default configuration airflow will execute one task after another in the SequentialExecutor mode. One can change its configuration to the LocalExecutor to leverage many process in the same machine or to the CeleryExecutor that can have more than one node/machine with as many processes needed. Below there is a list with the most common airflow executors:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sequential Executor - 1 task at a time, serialized;"}),"\n",(0,r.jsx)(n.li,{children:"Local Executor - many processes same machine/node;"}),"\n",(0,r.jsx)(n.li,{children:"Celery Executor - many machines/nodes with many processes;"}),"\n",(0,r.jsx)(n.li,{children:"Kubernetes Executor - runs on Kubernetes cluster."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"concurrency-configurations",children:"Concurrency configurations"}),"\n",(0,r.jsxs)(n.p,{children:["Airflow configure concurrency globally, this configurations can be located at the ",(0,r.jsx)(n.code,{children:"airflow.cfg"})," file. The main ones are the following:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"parallelism - The max number of tasks instances;"}),"\n",(0,r.jsx)(n.li,{children:"dag_concurrency - The number of tasks allowed per DAG;"}),"\n",(0,r.jsx)(n.li,{children:"max_active_runs_per_dat - The max number of runs per DAG."}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"metadata-database-and-communications",children:"Metadata database and communications"}),"\n",(0,r.jsxs)(n.p,{children:["Airflow comes by default with a sqlite database and this type of db can handle only one write at a time, so if you are going to use concurrency you must change to a different database E.g. ",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/",children:"PostgreSQL"}),". The main configurations regarding this connection are:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"sql_alchemy_conn - db connection;"}),"\n",(0,r.jsx)(n.li,{children:"broker_url - Configuration for broker (redis - When using Celery Exec.);"}),"\n",(0,r.jsx)(n.li,{children:"result_backend - db results connection."}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"links",children:"Links"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://airflow.apache.org/",children:"Airflow"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.udemy.com/share/101Xv83@p97-RQWIVNWVfRknKqy2MIa2MPO22kX2sU_O4ha3qCsAsujRXuVLlQsvd86nbSFo/",children:"The Complete Hands-On Introduction to Apache Airflow"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);