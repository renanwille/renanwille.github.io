"use strict";(self.webpackChunkmy_docu_website=self.webpackChunkmy_docu_website||[]).push([[9758],{3011:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var o=n(4848),i=n(8453);const s={},r="Code design",a={id:"code/code_design",title:"Code design",description:"Designing efficient code is an art and sometimes is required to have knowledge from multiple fields in order to make it easy to understand and also fast. Here I resume knowledge acquired during some years working with it.",source:"@site/docs/code/code_design.md",sourceDirName:"code",slug:"/code/code_design",permalink:"/docs/code/code_design",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code/code_design.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code",permalink:"/docs/code/"},next:{title:"Code helpers",permalink:"/docs/code/code_helpers"}},d={},h=[];function c(e){const t={a:"a",blockquote:"blockquote",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"code-design",children:"Code design"})}),"\n",(0,o.jsx)(t.p,{children:"Designing efficient code is an art and sometimes is required to have knowledge from multiple fields in order to make it easy to understand and also fast. Here I resume knowledge acquired during some years working with it."}),"\n",(0,o.jsx)(t.p,{children:"For me the best code is the one that is easy to use, and not complex. Meaning that the developer will not have a big cognitive load when trying to develop a new feature or extend some functionality. The code reflects, when written, tree types of thing:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"The interpretation of the writer about the problem;"}),"\n",(0,o.jsx)(t.li,{children:"The writers ability to make abstractions;"}),"\n",(0,o.jsx)(t.li,{children:"The writers understanding and manipulation of the language that he is using."}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["But once written the code serves as a language from the writer to the computer and from the writer to the future self. As the time passes our interpretation of the problems that we are trying to solve, mental models and knowledge about the language evolves and so we can find better ways to write it, meaning that it is probable that we will end up with ",(0,o.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Technical_debt",children:"technical debt"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"I really like the book Ousterhout, John in A Philosophy of Software Design [[202102191934-APhilosophyofSoftwareDesign]], my visions align with his and accordingly with him the complexity can present itself in tree forms:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Change amplification: When you are trying to change one thing and end up having to rewrite the software;"}),"\n",(0,o.jsx)(t.li,{children:"Cognitive load: When you spend too much time trying to understand the code, before being able to change it;"}),"\n",(0,o.jsx)(t.li,{children:"Unknown unknowns: When the dependencies and behavior isn't clear in some part of the code."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"So to reduce the rate that we generate technical debt we can follow some principles that will help us in the future, the first one is to hide complexity. We need to design interfaces that are easy to use and that are deep, allowing the user to not think about what is underneath the interface and only worrying with how to use it. we can help the user by making the default use case as easy as possible."}),"\n",(0,o.jsx)(t.p,{children:"The second point is consistency, when we follow some pattern we gain cognitive leverage, and this can have effects on productivity because we know how things are supposed to be done and catch some errors when we unadvertised change the order of the things."}),"\n",(0,o.jsx)(t.p,{children:"The third is documentation, here I note tree types of it:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"The structure: the way the code is implemented is a form of documentation, because it encodes how the problem is solved;"}),"\n",(0,o.jsx)(t.li,{children:"The naming of the variable/functions or classes: this is important because makes the context easy to understand;"}),"\n",(0,o.jsx)(t.li,{children:"Comments: Besides the description of the variables and functions, comments are important to encode the thought process of the writer, that otherwise couldn't be represented in code."}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The forth point is to handle possible errors as they appear. The best way to do this is to rewrite the code in a form that they can't bother the user of the code, if this is not possible, at least describe the error on the definition documentation of the function."}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"Remember the fact that simple is not necessarily easy."}),"\n"]}),"\n",(0,o.jsx)(t.h1,{id:"code-patterns",children:"Code patterns"}),"\n",(0,o.jsxs)(t.p,{children:["One way of reducing complexity and making the interface simpler is using ",(0,o.jsx)(t.a,{href:"/docs/code/code_patterns",children:"code patterns"})," they appear in many problems and its up to the developer identify when its usage is applicable.[[code_patterns]]"]}),"\n",(0,o.jsx)(t.h1,{id:"links",children:"Links"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://freshman.tech/philosophy-of-software-design-summary/",children:"Book summary: A Philosophy of Software Design"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var o=n(6540);const i={},s=o.createContext(i);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);